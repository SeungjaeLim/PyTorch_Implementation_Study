# -*- coding: utf-8 -*-
"""BrainStrokePredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WmyP23ubE5VoRriE59tkpjhUIrEPKvRZ
"""

from google.colab import auth
auth.authenticate_user()

from google.colab import drive
drive.mount('/content/gdrive', force_remount=False)

import os
from pathlib import Path

folder = "colab/pytorch"
project_dir = "RF"

base_path = Path("/content/gdrive/My Drive/")
project_path = base_path / folder / project_dir
os.chdir(project_path)
for x in list(project_path.glob("*")):
    if x.is_dir():
        dir_name = str(x.relative_to(project_path))
        os.rename(dir_name, dir_name.split(" ", 1)[0])
print(f"현재 디렉토리 위치: {os.getcwd()}")
all_data = pd.read_csv('/content/gdrive/My Drive/colab/pytorch/RF/full_data.csv')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import seaborn as sns
from sklearn.datasets import make_classification
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

sns.set(style="darkgrid")

all_data

def preprocess(all_data):
  all_data = normalize(all_data)
  target = 'stroke'
  feature = ['gender', 'age', 'hypertension', 'heart_disease', 'ever_married',
           'work_type', 'Residence_type', 'avg_glucose_level', 'bmi',
           'smoking_status']

  X = all_data.loc[:,all_data.columns!=target]
  y = all_data.loc[:,all_data.columns==target]

  X = pd.get_dummies(X[feature])

  oversample = SMOTE()
  X, y = oversample.fit_resample(X, y)
  X_train, X_test, Y_train, Y_test = train_test_split(X,y, test_size=0.20, shuffle=True)

  return X_train, X_test, Y_train, Y_test

def normalize(df):
    norm_feature = ['age', 'avg_glucose_level', 'bmi']
    result = df.copy()
    for feature_name in norm_feature:
        max_value = df[feature_name].max()
        min_value = df[feature_name].min()
        result[feature_name] = (df[feature_name] - min_value) / (max_value - min_value)
    return result

def rf(X_train, Y_train, n_estimators=250):
 BSPredictRF = RandomForestClassifier(n_estimators=n_estimators, n_jobs=-1)
 BSPredictRF.fit(X_train, Y_train)
 return BSPredictRF

X_train, X_test, Y_train, Y_test = preprocess(all_data)

BSPredictRF = rf(X_train,Y_train.values.ravel(), n_estimators=500)

print("ACCURACY", BSPredictRF.score(X_test, Y_test))